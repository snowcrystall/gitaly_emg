// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package testdata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InterceptedWithOperationTypeClient is the client API for InterceptedWithOperationType service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterceptedWithOperationTypeClient interface {
	// intercepted services can't have operation type annotations.
	InvalidMethod(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
}

type interceptedWithOperationTypeClient struct {
	cc grpc.ClientConnInterface
}

func NewInterceptedWithOperationTypeClient(cc grpc.ClientConnInterface) InterceptedWithOperationTypeClient {
	return &interceptedWithOperationTypeClient{cc}
}

func (c *interceptedWithOperationTypeClient) InvalidMethod(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InterceptedWithOperationType/InvalidMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterceptedWithOperationTypeServer is the server API for InterceptedWithOperationType service.
// All implementations must embed UnimplementedInterceptedWithOperationTypeServer
// for forward compatibility
type InterceptedWithOperationTypeServer interface {
	// intercepted services can't have operation type annotations.
	InvalidMethod(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error)
	mustEmbedUnimplementedInterceptedWithOperationTypeServer()
}

// UnimplementedInterceptedWithOperationTypeServer must be embedded to have forward compatible implementations.
type UnimplementedInterceptedWithOperationTypeServer struct {
}

func (UnimplementedInterceptedWithOperationTypeServer) InvalidMethod(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod not implemented")
}
func (UnimplementedInterceptedWithOperationTypeServer) mustEmbedUnimplementedInterceptedWithOperationTypeServer() {
}

// UnsafeInterceptedWithOperationTypeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterceptedWithOperationTypeServer will
// result in compilation errors.
type UnsafeInterceptedWithOperationTypeServer interface {
	mustEmbedUnimplementedInterceptedWithOperationTypeServer()
}

func RegisterInterceptedWithOperationTypeServer(s grpc.ServiceRegistrar, srv InterceptedWithOperationTypeServer) {
	s.RegisterService(&InterceptedWithOperationType_ServiceDesc, srv)
}

func _InterceptedWithOperationType_InvalidMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterceptedWithOperationTypeServer).InvalidMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InterceptedWithOperationType/InvalidMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterceptedWithOperationTypeServer).InvalidMethod(ctx, req.(*InvalidMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterceptedWithOperationType_ServiceDesc is the grpc.ServiceDesc for InterceptedWithOperationType service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterceptedWithOperationType_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.InterceptedWithOperationType",
	HandlerType: (*InterceptedWithOperationTypeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvalidMethod",
			Handler:    _InterceptedWithOperationType_InvalidMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/internal/linter/testdata/invalid.proto",
}

// InvalidServiceClient is the client API for InvalidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvalidServiceClient interface {
	// should fail if op_type extension is missing
	InvalidMethod0(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if op type is unknown
	InvalidMethod1(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if target repo is not provided for accessor
	InvalidMethod2(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if missing either target repo or non-repo-scope for mutator
	InvalidMethod4(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if repository is not of type Repository
	InvalidMethod5(ctx context.Context, in *RequestWithWrongTypeRepository, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if nested repository isn't flagged
	InvalidMethod6(ctx context.Context, in *RequestWithNestedRepoNotFlagged, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if target field type is not of type Repository
	InvalidMethod7(ctx context.Context, in *InvalidTargetType, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if nested target field type is not of type Repository
	InvalidMethod8(ctx context.Context, in *InvalidNestedRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if target repo is specified for storage scoped RPC
	InvalidMethod9(ctx context.Context, in *InvalidMethodRequestWithRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if storage is specified for implicit repository scoped RPC
	InvalidMethod10(ctx context.Context, in *RequestWithStorageAndRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if storage is specified for repository scoped RPC
	InvalidMethod11(ctx context.Context, in *RequestWithNestedStorageAndRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if storage isn't specified for storage scoped RPC
	InvalidMethod13(ctx context.Context, in *InvalidTargetType, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if multiple storage is specified for storage scoped RPC
	InvalidMethod14(ctx context.Context, in *RequestWithMultipleNestedStorage, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
}

type invalidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvalidServiceClient(cc grpc.ClientConnInterface) InvalidServiceClient {
	return &invalidServiceClient{cc}
}

func (c *invalidServiceClient) InvalidMethod0(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod0", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod1(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod2(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod4(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod5(ctx context.Context, in *RequestWithWrongTypeRepository, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod5", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod6(ctx context.Context, in *RequestWithNestedRepoNotFlagged, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod7(ctx context.Context, in *InvalidTargetType, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod7", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod8(ctx context.Context, in *InvalidNestedRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod8", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod9(ctx context.Context, in *InvalidMethodRequestWithRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod9", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod10(ctx context.Context, in *RequestWithStorageAndRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod10", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod11(ctx context.Context, in *RequestWithNestedStorageAndRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod11", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod13(ctx context.Context, in *InvalidTargetType, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod13", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod14(ctx context.Context, in *RequestWithMultipleNestedStorage, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod14", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvalidServiceServer is the server API for InvalidService service.
// All implementations must embed UnimplementedInvalidServiceServer
// for forward compatibility
type InvalidServiceServer interface {
	// should fail if op_type extension is missing
	InvalidMethod0(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error)
	// should fail if op type is unknown
	InvalidMethod1(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error)
	// should fail if target repo is not provided for accessor
	InvalidMethod2(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error)
	// should fail if missing either target repo or non-repo-scope for mutator
	InvalidMethod4(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error)
	// should fail if repository is not of type Repository
	InvalidMethod5(context.Context, *RequestWithWrongTypeRepository) (*InvalidMethodResponse, error)
	// should fail if nested repository isn't flagged
	InvalidMethod6(context.Context, *RequestWithNestedRepoNotFlagged) (*InvalidMethodResponse, error)
	// should fail if target field type is not of type Repository
	InvalidMethod7(context.Context, *InvalidTargetType) (*InvalidMethodResponse, error)
	// should fail if nested target field type is not of type Repository
	InvalidMethod8(context.Context, *InvalidNestedRequest) (*InvalidMethodResponse, error)
	// should fail if target repo is specified for storage scoped RPC
	InvalidMethod9(context.Context, *InvalidMethodRequestWithRepo) (*InvalidMethodResponse, error)
	// should fail if storage is specified for implicit repository scoped RPC
	InvalidMethod10(context.Context, *RequestWithStorageAndRepo) (*InvalidMethodResponse, error)
	// should fail if storage is specified for repository scoped RPC
	InvalidMethod11(context.Context, *RequestWithNestedStorageAndRepo) (*InvalidMethodResponse, error)
	// should fail if storage isn't specified for storage scoped RPC
	InvalidMethod13(context.Context, *InvalidTargetType) (*InvalidMethodResponse, error)
	// should fail if multiple storage is specified for storage scoped RPC
	InvalidMethod14(context.Context, *RequestWithMultipleNestedStorage) (*InvalidMethodResponse, error)
	mustEmbedUnimplementedInvalidServiceServer()
}

// UnimplementedInvalidServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvalidServiceServer struct {
}

func (UnimplementedInvalidServiceServer) InvalidMethod0(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod0 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod1(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod1 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod2(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod2 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod4(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod4 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod5(context.Context, *RequestWithWrongTypeRepository) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod5 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod6(context.Context, *RequestWithNestedRepoNotFlagged) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod6 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod7(context.Context, *InvalidTargetType) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod7 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod8(context.Context, *InvalidNestedRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod8 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod9(context.Context, *InvalidMethodRequestWithRepo) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod9 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod10(context.Context, *RequestWithStorageAndRepo) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod10 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod11(context.Context, *RequestWithNestedStorageAndRepo) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod11 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod13(context.Context, *InvalidTargetType) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod13 not implemented")
}
func (UnimplementedInvalidServiceServer) InvalidMethod14(context.Context, *RequestWithMultipleNestedStorage) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod14 not implemented")
}
func (UnimplementedInvalidServiceServer) mustEmbedUnimplementedInvalidServiceServer() {}

// UnsafeInvalidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvalidServiceServer will
// result in compilation errors.
type UnsafeInvalidServiceServer interface {
	mustEmbedUnimplementedInvalidServiceServer()
}

func RegisterInvalidServiceServer(s grpc.ServiceRegistrar, srv InvalidServiceServer) {
	s.RegisterService(&InvalidService_ServiceDesc, srv)
}

func _InvalidService_InvalidMethod0_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod0(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod0",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod0(ctx, req.(*InvalidMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod1(ctx, req.(*InvalidMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod2(ctx, req.(*InvalidMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod4(ctx, req.(*InvalidMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithWrongTypeRepository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod5",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod5(ctx, req.(*RequestWithWrongTypeRepository))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithNestedRepoNotFlagged)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod6(ctx, req.(*RequestWithNestedRepoNotFlagged))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod7_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidTargetType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod7(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod7",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod7(ctx, req.(*InvalidTargetType))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod8_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidNestedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod8(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod8",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod8(ctx, req.(*InvalidNestedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod9_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequestWithRepo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod9(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod9",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod9(ctx, req.(*InvalidMethodRequestWithRepo))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod10_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithStorageAndRepo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod10(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod10",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod10(ctx, req.(*RequestWithStorageAndRepo))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod11_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithNestedStorageAndRepo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod11(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod11",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod11(ctx, req.(*RequestWithNestedStorageAndRepo))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod13_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidTargetType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod13(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod13",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod13(ctx, req.(*InvalidTargetType))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod14_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithMultipleNestedStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod14(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod14",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod14(ctx, req.(*RequestWithMultipleNestedStorage))
	}
	return interceptor(ctx, in, info, handler)
}

// InvalidService_ServiceDesc is the grpc.ServiceDesc for InvalidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvalidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.InvalidService",
	HandlerType: (*InvalidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvalidMethod0",
			Handler:    _InvalidService_InvalidMethod0_Handler,
		},
		{
			MethodName: "InvalidMethod1",
			Handler:    _InvalidService_InvalidMethod1_Handler,
		},
		{
			MethodName: "InvalidMethod2",
			Handler:    _InvalidService_InvalidMethod2_Handler,
		},
		{
			MethodName: "InvalidMethod4",
			Handler:    _InvalidService_InvalidMethod4_Handler,
		},
		{
			MethodName: "InvalidMethod5",
			Handler:    _InvalidService_InvalidMethod5_Handler,
		},
		{
			MethodName: "InvalidMethod6",
			Handler:    _InvalidService_InvalidMethod6_Handler,
		},
		{
			MethodName: "InvalidMethod7",
			Handler:    _InvalidService_InvalidMethod7_Handler,
		},
		{
			MethodName: "InvalidMethod8",
			Handler:    _InvalidService_InvalidMethod8_Handler,
		},
		{
			MethodName: "InvalidMethod9",
			Handler:    _InvalidService_InvalidMethod9_Handler,
		},
		{
			MethodName: "InvalidMethod10",
			Handler:    _InvalidService_InvalidMethod10_Handler,
		},
		{
			MethodName: "InvalidMethod11",
			Handler:    _InvalidService_InvalidMethod11_Handler,
		},
		{
			MethodName: "InvalidMethod13",
			Handler:    _InvalidService_InvalidMethod13_Handler,
		},
		{
			MethodName: "InvalidMethod14",
			Handler:    _InvalidService_InvalidMethod14_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/internal/linter/testdata/invalid.proto",
}
