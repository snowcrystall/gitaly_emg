// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: wiki.proto

package gitalypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WikiGetAllPagesRequest_SortBy int32

const (
	WikiGetAllPagesRequest_TITLE      WikiGetAllPagesRequest_SortBy = 0
	WikiGetAllPagesRequest_CREATED_AT WikiGetAllPagesRequest_SortBy = 1
)

// Enum value maps for WikiGetAllPagesRequest_SortBy.
var (
	WikiGetAllPagesRequest_SortBy_name = map[int32]string{
		0: "TITLE",
		1: "CREATED_AT",
	}
	WikiGetAllPagesRequest_SortBy_value = map[string]int32{
		"TITLE":      0,
		"CREATED_AT": 1,
	}
)

func (x WikiGetAllPagesRequest_SortBy) Enum() *WikiGetAllPagesRequest_SortBy {
	p := new(WikiGetAllPagesRequest_SortBy)
	*p = x
	return p
}

func (x WikiGetAllPagesRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WikiGetAllPagesRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_wiki_proto_enumTypes[0].Descriptor()
}

func (WikiGetAllPagesRequest_SortBy) Type() protoreflect.EnumType {
	return &file_wiki_proto_enumTypes[0]
}

func (x WikiGetAllPagesRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WikiGetAllPagesRequest_SortBy.Descriptor instead.
func (WikiGetAllPagesRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{9, 0}
}

type WikiListPagesRequest_SortBy int32

const (
	WikiListPagesRequest_TITLE      WikiListPagesRequest_SortBy = 0
	WikiListPagesRequest_CREATED_AT WikiListPagesRequest_SortBy = 1
)

// Enum value maps for WikiListPagesRequest_SortBy.
var (
	WikiListPagesRequest_SortBy_name = map[int32]string{
		0: "TITLE",
		1: "CREATED_AT",
	}
	WikiListPagesRequest_SortBy_value = map[string]int32{
		"TITLE":      0,
		"CREATED_AT": 1,
	}
)

func (x WikiListPagesRequest_SortBy) Enum() *WikiListPagesRequest_SortBy {
	p := new(WikiListPagesRequest_SortBy)
	*p = x
	return p
}

func (x WikiListPagesRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WikiListPagesRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_wiki_proto_enumTypes[1].Descriptor()
}

func (WikiListPagesRequest_SortBy) Type() protoreflect.EnumType {
	return &file_wiki_proto_enumTypes[1]
}

func (x WikiListPagesRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WikiListPagesRequest_SortBy.Descriptor instead.
func (WikiListPagesRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{11, 0}
}

type WikiCommitDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email    []byte `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Message  []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	UserId   int32  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName []byte `protobuf:"bytes,5,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *WikiCommitDetails) Reset() {
	*x = WikiCommitDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiCommitDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiCommitDetails) ProtoMessage() {}

func (x *WikiCommitDetails) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiCommitDetails.ProtoReflect.Descriptor instead.
func (*WikiCommitDetails) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{0}
}

func (x *WikiCommitDetails) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *WikiCommitDetails) GetEmail() []byte {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *WikiCommitDetails) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *WikiCommitDetails) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WikiCommitDetails) GetUserName() []byte {
	if x != nil {
		return x.UserName
	}
	return nil
}

type WikiPageVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *GitCommit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Format string     `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *WikiPageVersion) Reset() {
	*x = WikiPageVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiPageVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiPageVersion) ProtoMessage() {}

func (x *WikiPageVersion) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiPageVersion.ProtoReflect.Descriptor instead.
func (*WikiPageVersion) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{1}
}

func (x *WikiPageVersion) GetCommit() *GitCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *WikiPageVersion) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type WikiPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These fields are only present in the first message of a WikiPage stream
	Version    *WikiPageVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Format     string           `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Title      []byte           `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	UrlPath    string           `protobuf:"bytes,4,opt,name=url_path,json=urlPath,proto3" json:"url_path,omitempty"`
	Path       []byte           `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	Name       []byte           `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Historical bool             `protobuf:"varint,7,opt,name=historical,proto3" json:"historical,omitempty"`
	// This field is present in all messages of a WikiPage stream
	RawData []byte `protobuf:"bytes,8,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (x *WikiPage) Reset() {
	*x = WikiPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiPage) ProtoMessage() {}

func (x *WikiPage) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiPage.ProtoReflect.Descriptor instead.
func (*WikiPage) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{2}
}

func (x *WikiPage) GetVersion() *WikiPageVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *WikiPage) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *WikiPage) GetTitle() []byte {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *WikiPage) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

func (x *WikiPage) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *WikiPage) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *WikiPage) GetHistorical() bool {
	if x != nil {
		return x.Historical
	}
	return false
}

func (x *WikiPage) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

// This message is sent in a stream because the 'content' field may be large.
type WikiWritePageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These following fields are only present in the first message.
	Repository    *Repository        `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Name          []byte             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Format        string             `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	CommitDetails *WikiCommitDetails `protobuf:"bytes,4,opt,name=commit_details,json=commitDetails,proto3" json:"commit_details,omitempty"`
	// This field is present in all messages.
	Content []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *WikiWritePageRequest) Reset() {
	*x = WikiWritePageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiWritePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiWritePageRequest) ProtoMessage() {}

func (x *WikiWritePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiWritePageRequest.ProtoReflect.Descriptor instead.
func (*WikiWritePageRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{3}
}

func (x *WikiWritePageRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiWritePageRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *WikiWritePageRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *WikiWritePageRequest) GetCommitDetails() *WikiCommitDetails {
	if x != nil {
		return x.CommitDetails
	}
	return nil
}

func (x *WikiWritePageRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type WikiWritePageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DuplicateError []byte `protobuf:"bytes,1,opt,name=duplicate_error,json=duplicateError,proto3" json:"duplicate_error,omitempty"`
}

func (x *WikiWritePageResponse) Reset() {
	*x = WikiWritePageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiWritePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiWritePageResponse) ProtoMessage() {}

func (x *WikiWritePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiWritePageResponse.ProtoReflect.Descriptor instead.
func (*WikiWritePageResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{4}
}

func (x *WikiWritePageResponse) GetDuplicateError() []byte {
	if x != nil {
		return x.DuplicateError
	}
	return nil
}

type WikiUpdatePageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// There fields are only present in the first message of the stream
	Repository    *Repository        `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	PagePath      []byte             `protobuf:"bytes,2,opt,name=page_path,json=pagePath,proto3" json:"page_path,omitempty"`
	Title         []byte             `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Format        string             `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	CommitDetails *WikiCommitDetails `protobuf:"bytes,5,opt,name=commit_details,json=commitDetails,proto3" json:"commit_details,omitempty"`
	// This field is present in all messages
	Content []byte `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *WikiUpdatePageRequest) Reset() {
	*x = WikiUpdatePageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiUpdatePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiUpdatePageRequest) ProtoMessage() {}

func (x *WikiUpdatePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiUpdatePageRequest.ProtoReflect.Descriptor instead.
func (*WikiUpdatePageRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{5}
}

func (x *WikiUpdatePageRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiUpdatePageRequest) GetPagePath() []byte {
	if x != nil {
		return x.PagePath
	}
	return nil
}

func (x *WikiUpdatePageRequest) GetTitle() []byte {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *WikiUpdatePageRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *WikiUpdatePageRequest) GetCommitDetails() *WikiCommitDetails {
	if x != nil {
		return x.CommitDetails
	}
	return nil
}

func (x *WikiUpdatePageRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type WikiUpdatePageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error []byte `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *WikiUpdatePageResponse) Reset() {
	*x = WikiUpdatePageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiUpdatePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiUpdatePageResponse) ProtoMessage() {}

func (x *WikiUpdatePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiUpdatePageResponse.ProtoReflect.Descriptor instead.
func (*WikiUpdatePageResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{6}
}

func (x *WikiUpdatePageResponse) GetError() []byte {
	if x != nil {
		return x.Error
	}
	return nil
}

type WikiFindPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Title      []byte      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Revision   []byte      `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	Directory  []byte      `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *WikiFindPageRequest) Reset() {
	*x = WikiFindPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiFindPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiFindPageRequest) ProtoMessage() {}

func (x *WikiFindPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiFindPageRequest.ProtoReflect.Descriptor instead.
func (*WikiFindPageRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{7}
}

func (x *WikiFindPageRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiFindPageRequest) GetTitle() []byte {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *WikiFindPageRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *WikiFindPageRequest) GetDirectory() []byte {
	if x != nil {
		return x.Directory
	}
	return nil
}

// WikiFindPageResponse is a stream because we need multiple WikiPage
// messages to send the raw_data field.
type WikiFindPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *WikiPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *WikiFindPageResponse) Reset() {
	*x = WikiFindPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiFindPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiFindPageResponse) ProtoMessage() {}

func (x *WikiFindPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiFindPageResponse.ProtoReflect.Descriptor instead.
func (*WikiFindPageResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{8}
}

func (x *WikiFindPageResponse) GetPage() *WikiPage {
	if x != nil {
		return x.Page
	}
	return nil
}

type WikiGetAllPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Passing 0 means no limit is applied
	Limit         uint32                        `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	DirectionDesc bool                          `protobuf:"varint,3,opt,name=direction_desc,json=directionDesc,proto3" json:"direction_desc,omitempty"`
	Sort          WikiGetAllPagesRequest_SortBy `protobuf:"varint,4,opt,name=sort,proto3,enum=gitaly.WikiGetAllPagesRequest_SortBy" json:"sort,omitempty"`
}

func (x *WikiGetAllPagesRequest) Reset() {
	*x = WikiGetAllPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiGetAllPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiGetAllPagesRequest) ProtoMessage() {}

func (x *WikiGetAllPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiGetAllPagesRequest.ProtoReflect.Descriptor instead.
func (*WikiGetAllPagesRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{9}
}

func (x *WikiGetAllPagesRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiGetAllPagesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WikiGetAllPagesRequest) GetDirectionDesc() bool {
	if x != nil {
		return x.DirectionDesc
	}
	return false
}

func (x *WikiGetAllPagesRequest) GetSort() WikiGetAllPagesRequest_SortBy {
	if x != nil {
		return x.Sort
	}
	return WikiGetAllPagesRequest_TITLE
}

// The WikiGetAllPagesResponse stream is a concatenation of WikiPage streams
type WikiGetAllPagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *WikiPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// When end_of_page is true it signals a change of page for the next Response message (if any)
	EndOfPage bool `protobuf:"varint,2,opt,name=end_of_page,json=endOfPage,proto3" json:"end_of_page,omitempty"`
}

func (x *WikiGetAllPagesResponse) Reset() {
	*x = WikiGetAllPagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiGetAllPagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiGetAllPagesResponse) ProtoMessage() {}

func (x *WikiGetAllPagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiGetAllPagesResponse.ProtoReflect.Descriptor instead.
func (*WikiGetAllPagesResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{10}
}

func (x *WikiGetAllPagesResponse) GetPage() *WikiPage {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *WikiGetAllPagesResponse) GetEndOfPage() bool {
	if x != nil {
		return x.EndOfPage
	}
	return false
}

type WikiListPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Passing 0 means no limit is applied
	Limit         uint32                      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	DirectionDesc bool                        `protobuf:"varint,3,opt,name=direction_desc,json=directionDesc,proto3" json:"direction_desc,omitempty"`
	Sort          WikiListPagesRequest_SortBy `protobuf:"varint,4,opt,name=sort,proto3,enum=gitaly.WikiListPagesRequest_SortBy" json:"sort,omitempty"`
	Offset        uint32                      `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *WikiListPagesRequest) Reset() {
	*x = WikiListPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiListPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiListPagesRequest) ProtoMessage() {}

func (x *WikiListPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiListPagesRequest.ProtoReflect.Descriptor instead.
func (*WikiListPagesRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{11}
}

func (x *WikiListPagesRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiListPagesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WikiListPagesRequest) GetDirectionDesc() bool {
	if x != nil {
		return x.DirectionDesc
	}
	return false
}

func (x *WikiListPagesRequest) GetSort() WikiListPagesRequest_SortBy {
	if x != nil {
		return x.Sort
	}
	return WikiListPagesRequest_TITLE
}

func (x *WikiListPagesRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// The WikiListPagesResponse stream is a concatenation of WikiPage streams without content
type WikiListPagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *WikiPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *WikiListPagesResponse) Reset() {
	*x = WikiListPagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiListPagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiListPagesResponse) ProtoMessage() {}

func (x *WikiListPagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiListPagesResponse.ProtoReflect.Descriptor instead.
func (*WikiListPagesResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{12}
}

func (x *WikiListPagesResponse) GetPage() *WikiPage {
	if x != nil {
		return x.Page
	}
	return nil
}

var File_wiki_proto protoreflect.FileDescriptor

var file_wiki_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x77, 0x69, 0x6b, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x79, 0x1a, 0x0a, 0x6c, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d,
	0x01, 0x0a, 0x11, 0x57, 0x69, 0x6b, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x54,
	0x0a, 0x0f, 0x57, 0x69, 0x6b, 0x69, 0x50, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x08, 0x57, 0x69, 0x6b, 0x69, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69,
	0x50, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xd8, 0x01, 0x0a, 0x14, 0x57, 0x69, 0x6b, 0x69, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x40, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79,
	0x2e, 0x57, 0x69, 0x6b, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x15, 0x57,
	0x69, 0x6b, 0x69, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf8, 0x01,
	0x0a, 0x15, 0x57, 0x69, 0x6b, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x40, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x57, 0x69,
	0x6b, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x16, 0x57, 0x69, 0x6b, 0x69,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x57, 0x69, 0x6b,
	0x69, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x3c, 0x0a, 0x14, 0x57, 0x69,
	0x6b, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x16, 0x57, 0x69, 0x6b,
	0x69, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c,
	0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x23, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x01, 0x22, 0x5f, 0x0a, 0x17, 0x57, 0x69,
	0x6b, 0x69, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b,
	0x69, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x65,
	0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x50, 0x61, 0x67, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x14,
	0x57, 0x69, 0x6b, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6,
	0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x37, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x23, 0x0a, 0x06,
	0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10,
	0x01, 0x22, 0x3d, 0x0a, 0x15, 0x57, 0x69, 0x6b, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x32, 0xcb, 0x03, 0x0a, 0x0b, 0x57, 0x69, 0x6b, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x56, 0x0a, 0x0d, 0x57, 0x69, 0x6b, 0x69, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06,
	0xfa, 0x97, 0x28, 0x02, 0x08, 0x01, 0x28, 0x01, 0x12, 0x59, 0x0a, 0x0e, 0x57, 0x69, 0x6b, 0x69,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08,
	0x01, 0x28, 0x01, 0x12, 0x53, 0x0a, 0x0c, 0x57, 0x69, 0x6b, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b,
	0x69, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x46, 0x69,
	0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06,
	0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x0f, 0x57, 0x69, 0x6b, 0x69,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x79, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97,
	0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x0d, 0x57, 0x69, 0x6b, 0x69, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79,
	0x2e, 0x57, 0x69, 0x6b, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x57,
	0x69, 0x6b, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x42, 0x34,
	0x5a, 0x32, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2f, 0x76,
	0x31, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wiki_proto_rawDescOnce sync.Once
	file_wiki_proto_rawDescData = file_wiki_proto_rawDesc
)

func file_wiki_proto_rawDescGZIP() []byte {
	file_wiki_proto_rawDescOnce.Do(func() {
		file_wiki_proto_rawDescData = protoimpl.X.CompressGZIP(file_wiki_proto_rawDescData)
	})
	return file_wiki_proto_rawDescData
}

var file_wiki_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wiki_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_wiki_proto_goTypes = []interface{}{
	(WikiGetAllPagesRequest_SortBy)(0), // 0: gitaly.WikiGetAllPagesRequest.SortBy
	(WikiListPagesRequest_SortBy)(0),   // 1: gitaly.WikiListPagesRequest.SortBy
	(*WikiCommitDetails)(nil),          // 2: gitaly.WikiCommitDetails
	(*WikiPageVersion)(nil),            // 3: gitaly.WikiPageVersion
	(*WikiPage)(nil),                   // 4: gitaly.WikiPage
	(*WikiWritePageRequest)(nil),       // 5: gitaly.WikiWritePageRequest
	(*WikiWritePageResponse)(nil),      // 6: gitaly.WikiWritePageResponse
	(*WikiUpdatePageRequest)(nil),      // 7: gitaly.WikiUpdatePageRequest
	(*WikiUpdatePageResponse)(nil),     // 8: gitaly.WikiUpdatePageResponse
	(*WikiFindPageRequest)(nil),        // 9: gitaly.WikiFindPageRequest
	(*WikiFindPageResponse)(nil),       // 10: gitaly.WikiFindPageResponse
	(*WikiGetAllPagesRequest)(nil),     // 11: gitaly.WikiGetAllPagesRequest
	(*WikiGetAllPagesResponse)(nil),    // 12: gitaly.WikiGetAllPagesResponse
	(*WikiListPagesRequest)(nil),       // 13: gitaly.WikiListPagesRequest
	(*WikiListPagesResponse)(nil),      // 14: gitaly.WikiListPagesResponse
	(*GitCommit)(nil),                  // 15: gitaly.GitCommit
	(*Repository)(nil),                 // 16: gitaly.Repository
}
var file_wiki_proto_depIdxs = []int32{
	15, // 0: gitaly.WikiPageVersion.commit:type_name -> gitaly.GitCommit
	3,  // 1: gitaly.WikiPage.version:type_name -> gitaly.WikiPageVersion
	16, // 2: gitaly.WikiWritePageRequest.repository:type_name -> gitaly.Repository
	2,  // 3: gitaly.WikiWritePageRequest.commit_details:type_name -> gitaly.WikiCommitDetails
	16, // 4: gitaly.WikiUpdatePageRequest.repository:type_name -> gitaly.Repository
	2,  // 5: gitaly.WikiUpdatePageRequest.commit_details:type_name -> gitaly.WikiCommitDetails
	16, // 6: gitaly.WikiFindPageRequest.repository:type_name -> gitaly.Repository
	4,  // 7: gitaly.WikiFindPageResponse.page:type_name -> gitaly.WikiPage
	16, // 8: gitaly.WikiGetAllPagesRequest.repository:type_name -> gitaly.Repository
	0,  // 9: gitaly.WikiGetAllPagesRequest.sort:type_name -> gitaly.WikiGetAllPagesRequest.SortBy
	4,  // 10: gitaly.WikiGetAllPagesResponse.page:type_name -> gitaly.WikiPage
	16, // 11: gitaly.WikiListPagesRequest.repository:type_name -> gitaly.Repository
	1,  // 12: gitaly.WikiListPagesRequest.sort:type_name -> gitaly.WikiListPagesRequest.SortBy
	4,  // 13: gitaly.WikiListPagesResponse.page:type_name -> gitaly.WikiPage
	5,  // 14: gitaly.WikiService.WikiWritePage:input_type -> gitaly.WikiWritePageRequest
	7,  // 15: gitaly.WikiService.WikiUpdatePage:input_type -> gitaly.WikiUpdatePageRequest
	9,  // 16: gitaly.WikiService.WikiFindPage:input_type -> gitaly.WikiFindPageRequest
	11, // 17: gitaly.WikiService.WikiGetAllPages:input_type -> gitaly.WikiGetAllPagesRequest
	13, // 18: gitaly.WikiService.WikiListPages:input_type -> gitaly.WikiListPagesRequest
	6,  // 19: gitaly.WikiService.WikiWritePage:output_type -> gitaly.WikiWritePageResponse
	8,  // 20: gitaly.WikiService.WikiUpdatePage:output_type -> gitaly.WikiUpdatePageResponse
	10, // 21: gitaly.WikiService.WikiFindPage:output_type -> gitaly.WikiFindPageResponse
	12, // 22: gitaly.WikiService.WikiGetAllPages:output_type -> gitaly.WikiGetAllPagesResponse
	14, // 23: gitaly.WikiService.WikiListPages:output_type -> gitaly.WikiListPagesResponse
	19, // [19:24] is the sub-list for method output_type
	14, // [14:19] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_wiki_proto_init() }
func file_wiki_proto_init() {
	if File_wiki_proto != nil {
		return
	}
	file_lint_proto_init()
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wiki_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiCommitDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiPageVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiWritePageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiWritePageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiUpdatePageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiUpdatePageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiFindPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiFindPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiGetAllPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiGetAllPagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiListPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiListPagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wiki_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wiki_proto_goTypes,
		DependencyIndexes: file_wiki_proto_depIdxs,
		EnumInfos:         file_wiki_proto_enumTypes,
		MessageInfos:      file_wiki_proto_msgTypes,
	}.Build()
	File_wiki_proto = out.File
	file_wiki_proto_rawDesc = nil
	file_wiki_proto_goTypes = nil
	file_wiki_proto_depIdxs = nil
}
